Question:
介绍一下JavaScript的执行上下文？

Answer: 
  JS执行上下文是执行JS代码环境的抽象概念
  [全局执行上下文] 任何不在函数内部的代码都在全局上下文中
  [函数执行上线文] 每当函数被调用时都会为函数创建一个新的上下文
  [Eval函数上下文] eval内部函数有自己的上下文

  创建上下文分为三步: this绑定、词法环境创建、变量环境创建
  this的值取决于函数被如何调用，或指向顶层变量
  词法环境：持有 标识符 - 变量映射 结构， 分为变量记录器 & 外部环境引用两部分
  变量环境  和词法环境相似，不同的是变量环境只持有var声明的变量，所以变量声明提升与变量死区就是因为这个

Question:
介绍一下JavaScript作用作用域链

Answer:
JS作用域链一般为 当前作用域 -> 父作用域 * n ->  Window(全局作用域)
变量查找数据也如上面所述，但是有一些例外，如闭包
function closure () {
  let i = 1
  return function (x) {
    return x + 1
  }
}
let outFunc = closure()
outFunc(2) // 3

在上述示例中，outFunc是在全局作用域中调用的，那么此函数除了在本身上下文中查找i之外，
只能在全局作用域中查找，但是全局作用域中没有，但最后结果却输出了3
这是因为实际上outFunc是持有了closure内部定义的变量的。

JS中所有作用域是静态分析的，即函数可访问的外部变量是在定义时就确定了的，和函数在哪何时调用没有关系。
在函数定义时函数内部属性[[Scope]]会保存作用域链，在函数调用创建上下文时：
1. 复制[[Scope]]并创建作用域链
2. 用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明
3. 将活动对象压入 当前函数 作用域链顶端
4. 开始执行函数内部代码