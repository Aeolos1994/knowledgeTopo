/**
 * 性能监控：
 * 通过Performance api获取整个页面渲染的时间
 * 关键指标：
 *    performance.navigation:  页面加载的相关信息
 *      redirectCount 重定向次数
 *      type 页面类型 [正常打开、刷新、浏览器前进后退打开、其他]
 *    performance.timing: 性能相关的时间信息
 *      navigationStart
 *      unloadEventStart
 *      unloadEventEnd  // 以上与上一个文档卸载有关
 *      redirectStart
 *      redirectEnd  // 重定向的时间
 *      fetchStart // 浏览器准备进行Http请求
 *      domainLookupStart // 开始域名解析
 *      domainLookupEnd // 域名解析结束
 *      (secure)connectStart // 请求建立连接的时间
 *      (secure)connectEnd // Tcp连接建立时间
 *      requestStart // http请求发送时间
 *      responseStart // 获取到最初的返回数据包的时间
 *      responseEnd // 获取到全部返回结构体的时间
 *      domLoading // dom开始解析的时间  document.readyStatus为loading
 *      domInteractive // dom解析结束，开始加载内嵌资源
 *      domContentLoadedEventStart // 所有立即执行脚本开始解析
 *      domContentLoadedEventEnd // 所有立即执行脚本执行完毕
 *      domComplete //文档解析完成
 *      loadEventStart(End) // 当load事件结束，即加载事件完成
 */

 // 计算加载时间
function getPerformanceTiming() {
  var performance = window.performance;
  if (!performance) {
      // 当前浏览器不支持
      console.log('你的浏览器不支持 performance 接口');
      return;
  }
  var t = performance.timing;
  var times = {};
  //【重要】页面加载完成的时间
  //【原因】这几乎代表了用户等待页面可用的时间
  times.loadPage = t.loadEventEnd - t.navigationStart;
  //【重要】解析 DOM 树结构的时间
  //【原因】反省下你的 DOM 树嵌套是不是太多了！
  times.domReady = t.domComplete - t.responseEnd;
  //【重要】重定向的时间
  //【原因】拒绝重定向！比如，http://example.com/ 就不该写成 http://example.com
  times.redirect = t.redirectEnd - t.redirectStart;
  //【重要】DNS 查询时间
  //【原因】DNS 预加载做了么？页面内是不是使用了太多不同的域名导致域名查询的时间太长？
  // 可使用 HTML5 Prefetch 预查询 DNS ，见：[HTML5 prefetch](http://segmentfault.com/a/1190000000633364)            
  times.lookupDomain = t.domainLookupEnd - t.domainLookupStart;
  //【重要】读取页面第一个字节的时间
  //【原因】这可以理解为用户拿到你的资源占用的时间，加异地机房了么，加CDN 处理了么？加带宽了么？加 CPU 运算速度了么？
  // TTFB 即 Time To First Byte 的意思
  // 维基百科：https://en.wikipedia.org/wiki/Time_To_First_Byte
  times.ttfb = t.responseStart - t.navigationStart;
  //【重要】内容加载完成的时间
  //【原因】页面内容经过 gzip 压缩了么，静态资源 css/js 等压缩了么？
  times.request = t.responseEnd - t.requestStart;
  //【重要】执行 onload 回调函数的时间
  //【原因】是否太多不必要的操作都放到 onload 回调函数里执行了，考虑过延迟加载、按需加载的策略么？
  times.loadEvent = t.loadEventEnd - t.loadEventStart;
  // DNS 缓存时间
  times.appcache = t.domainLookupStart - t.fetchStart;
  // 卸载页面的时间
  times.unloadEvent = t.unloadEventEnd - t.unloadEventStart;
  // TCP 建立连接完成握手的时间
  times.connect = t.connectEnd - t.connectStart;
  return times;
}
getPerformanceTiming()